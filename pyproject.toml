[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"

[tool.poetry]
name = "web-scrapper-cli"
version = "0.1.0"
description = "Provider-based web scraping system with pluggable scraping and storage providers"
authors = ["Developer <developer@example.com>"]
readme = "README.md"
license = "MIT"
repository = "https://github.com/shafqat-a/scrapper"
keywords = ["web-scraping", "scrapy", "playwright", "beautifulsoup", "data-extraction"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Internet :: WWW/HTTP",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: System :: Archiving",
]

[tool.poetry.dependencies]
python = "^3.11"
pydantic = "^2.4.2"
click = "^8.1.7"
rich = "^13.6.0"
scrapy = "^2.11.0"
playwright = "^1.38.0"
beautifulsoup4 = "^4.12.2"
requests = "^2.31.0"
lxml = "^4.9.3"
fake-useragent = "^1.4.0"
tenacity = "^8.2.3"
sqlalchemy = "^2.0.21"
aiohttp = "^3.8.6"
aiofiles = "^23.2.1"

[tool.poetry.group.dev.dependencies]
pytest = "^7.4.2"
pytest-asyncio = "^0.21.1"
pytest-playwright = "^0.4.3"
pytest-mock = "^3.11.1"
pytest-cov = "^4.1.0"
black = "^23.9.1"
isort = "^5.12.0"
mypy = "^1.6.1"
flake8 = "^6.1.0"
pre-commit = "^3.5.0"
docker = "^6.1.3"

[tool.poetry.group.storage.dependencies]
psycopg2 = {version = "^2.9.7", optional = true}
asyncpg = {version = "^0.28.0", optional = true}
pymongo = {version = "^4.5.0", optional = true}
motor = {version = "^3.3.1", optional = true}
pyodbc = {version = "^4.0.39", optional = true}
pandas = {version = "^2.1.1", optional = true}

[tool.poetry.extras]
postgresql = ["psycopg2", "asyncpg"]
mongodb = ["pymongo", "motor"]
sqlserver = ["pyodbc"]
analytics = ["pandas"]
all = ["psycopg2", "asyncpg", "pymongo", "motor", "pyodbc", "pandas"]

[tool.poetry.scripts]
scrapper = "scraper_core.cli.main:cli"

[tool.black]
line-length = 88
target-version = ['py311']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["scraper_core", "providers"]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "scrapy.*",
    "fake_useragent.*",
    "playwright.*",
    "bs4.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = [
    "-ra",
    "-q",
    "--strict-markers",
    "--strict-config",
    "--cov=src",
    "--cov-report=term-missing",
    "--cov-report=html",
    "--cov-report=xml",
    "--cov-fail-under=80",
    "--tb=short",
]
testpaths = ["tests"]
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
console_output_style = "progress"
junit_family = "xunit2"
log_cli = true
log_cli_level = "INFO"
log_cli_format = "%(asctime)s [%(levelname)s] %(name)s: %(message)s"
log_cli_date_format = "%Y-%m-%d %H:%M:%S"
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "contract: marks tests as contract tests for providers",
    "e2e: marks tests as end-to-end tests",
    "unit: marks tests as unit tests",
    "playwright: marks tests that require Playwright browser automation",
    "scrapy: marks tests that require Scrapy framework",
    "database: marks tests that require database connections",
    "network: marks tests that require network access",
    "docker: marks tests that require Docker containers",
]
filterwarnings = [
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
    "ignore:.*urllib3.*:DeprecationWarning",
    "ignore:.*scrapy.*:DeprecationWarning",
    "ignore:.*twisted.*:DeprecationWarning",
    "error",
]

[tool.coverage.run]
source = ["src"]
omit = ["src/*/tests/*", "tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]
